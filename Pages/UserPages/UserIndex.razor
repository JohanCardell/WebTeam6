@page "/users"

@inject IUserService service;

<h3>User Index</h3>
<p>Shows all users in database. You can add and delete users. Edit is not implemented</p>



@if (userList == null)
{
    <div class="loader">Loading...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>User name</th>
                <th>Email address</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userItem in userList)
            {
                <tr>
                    <td>@userItem.UserName</td>
                    <td>@userItem.Email</td>
                    <td><input id="user-edit-btn" type="button" class="btn btn-primary" value="Edit" /></td>
                    <td><input id="user-delete-btn " type="button" class="btn btn-danger" value="Delete" @onclick="(() => DeleteUser(userItem))" /></td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <input id="add-user-btn" type="button" data-toggle="modal" data-target="#userModal" class="btn btn-primary" value="Add User" @onclick="(() => InitializeUserObject())" />
</div>

<UserCreation UserObject=userObject DataChanged="@DataChanged"></UserCreation>


@code {
        List<User> userList = new List<User>();


        User userObject = new User();

    protected override async Task OnInitializedAsync()
    {
        userList = await service.Get();
    }

    private void InitializeUserObject()
    {
        userObject = new User();
    }

    private async void DataChanged()
    {
        userList = await service.Get();
        StateHasChanged();
    }

    private async Task DeleteUser(User user)
    {
        userObject = user;
        var task = await service.Delete(userObject.Id);
        userList = await service.Get();
        userObject = new User();
    }
}
