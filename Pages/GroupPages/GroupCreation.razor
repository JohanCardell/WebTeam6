@using WebTeam6.Data
@using WebTeam6.Services
@inject IGroupService groupService
@inject IUserService userService
@inject IJSRuntime jsRuntime


<div class="modal fade" tabindex="-1" role="dialog" id="groupModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Group details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm id="group-creation-form" Model="@GroupObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="hidden" @bind-value="@GroupObject.Id" />
                        <InputText id="new-group-name-field" type="text" class="form-control" @bind-Value="@GroupObject.Name" />
                    </div>
                    <button id="submit-btn" type="submit" class="btn btn-primary">Submit</button>
                    <button id="cancel-btn" type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public Group GroupObject { get; set; } = new Group();

    [Parameter]
    public Action DataChanged { get; set; }

    protected override void OnInitialized()
    {
        GroupObject = new Group();
    }

    private async Task CloseGroupModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "groupModal");
    }

    private async void HandleValidSubmit()
    {
        //GroupObject.Owner = await userService.GetAuthorizedUser(authenticationStateTask);
        //GroupObject.Owner.Groups.Add(GroupObject);
        await groupService.Add(GroupObject, authenticationStateTask);
        await CloseGroupModal();
        DataChanged?.Invoke();
    }

}
