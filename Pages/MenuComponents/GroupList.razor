
@inject IUserService userService
@inject IGroupService groupService

@if (UserGroupList == null)
{
    <li>Loading...</li>
}
else
{
    @foreach (var groupItem in UserGroupList)
    {
        <li id="@($"group-#{groupItem.Id}-btn")" class="nav-item px-3">
            <NavLink class="nav-link" href="@($"groupdetails/{groupItem.Id}")" @onclick="(() => Refresh())">
                <span class="oi oi-people" aria-hidden="true"></span> @groupItem.Name
            </NavLink>
        </li>
        @*<a id="group-details-btn" type="button" href="@($"groupdetails/{groupItem.Id}")" role="button" class="btn btn-info">@groupItem.Name</a>*@
        //counter++;
    }
}

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    private Group GroupObject { get; set; }
    private List<Group> UserGroupList { get; set; }
    //private int counter;

    protected override async Task OnInitializedAsync()
    {
        UserGroupList = await groupService.GetGetAuthorizedUserGroups(authenticationStateTask);
        //counter = UserGroupList.Count();
    }

    protected async void Refresh()
    {
        UserGroupList = await groupService.GetGetAuthorizedUserGroups(authenticationStateTask);
        StateHasChanged();
    }

}
